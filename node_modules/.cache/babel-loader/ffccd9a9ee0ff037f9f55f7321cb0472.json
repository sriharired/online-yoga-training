{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar DOMLazyTree = require('./DOMLazyTree');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMEmptyComponent = function (instantiate) {\n  // ReactCompositeComponent uses this:\n  this._currentElement = null; // ReactDOMComponentTree uses these:\n\n  this._hostNode = null;\n  this._hostParent = null;\n  this._hostContainerInfo = null;\n  this._domID = 0;\n};\n\n_assign(ReactDOMEmptyComponent.prototype, {\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var domID = hostContainerInfo._idCounter++;\n    this._domID = domID;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n    var nodeValue = ' react-empty: ' + this._domID + ' ';\n\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var node = ownerDocument.createComment(nodeValue);\n      ReactDOMComponentTree.precacheNode(this, node);\n      return DOMLazyTree(node);\n    } else {\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd insert a comment node, but since this is a situation\n        // where React won't take over (static pages), we can simply return\n        // nothing.\n        return '';\n      }\n\n      return '<!--' + nodeValue + '-->';\n    }\n  },\n  receiveComponent: function () {},\n  getHostNode: function () {\n    return ReactDOMComponentTree.getNodeFromInstance(this);\n  },\n  unmountComponent: function () {\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMEmptyComponent;","map":{"version":3,"names":["_assign","require","DOMLazyTree","ReactDOMComponentTree","ReactDOMEmptyComponent","instantiate","_currentElement","_hostNode","_hostParent","_hostContainerInfo","_domID","prototype","mountComponent","transaction","hostParent","hostContainerInfo","context","domID","_idCounter","nodeValue","useCreateElement","ownerDocument","_ownerDocument","node","createComment","precacheNode","renderToStaticMarkup","receiveComponent","getHostNode","getNodeFromInstance","unmountComponent","uncacheNode","module","exports"],"sources":["C:/Users/putha/node_modules/react-dom/lib/ReactDOMEmptyComponent.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMEmptyComponent = function (instantiate) {\n  // ReactCompositeComponent uses this:\n  this._currentElement = null;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n  this._hostContainerInfo = null;\n  this._domID = 0;\n};\n_assign(ReactDOMEmptyComponent.prototype, {\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    var domID = hostContainerInfo._idCounter++;\n    this._domID = domID;\n    this._hostParent = hostParent;\n    this._hostContainerInfo = hostContainerInfo;\n\n    var nodeValue = ' react-empty: ' + this._domID + ' ';\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var node = ownerDocument.createComment(nodeValue);\n      ReactDOMComponentTree.precacheNode(this, node);\n      return DOMLazyTree(node);\n    } else {\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd insert a comment node, but since this is a situation\n        // where React won't take over (static pages), we can simply return\n        // nothing.\n        return '';\n      }\n      return '<!--' + nodeValue + '-->';\n    }\n  },\n  receiveComponent: function () {},\n  getHostNode: function () {\n    return ReactDOMComponentTree.getNodeFromInstance(this);\n  },\n  unmountComponent: function () {\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMEmptyComponent;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AAEA,IAAIG,sBAAsB,GAAG,UAAUC,WAAV,EAAuB;EAClD;EACA,KAAKC,eAAL,GAAuB,IAAvB,CAFkD,CAGlD;;EACA,KAAKC,SAAL,GAAiB,IAAjB;EACA,KAAKC,WAAL,GAAmB,IAAnB;EACA,KAAKC,kBAAL,GAA0B,IAA1B;EACA,KAAKC,MAAL,GAAc,CAAd;AACD,CARD;;AASAV,OAAO,CAACI,sBAAsB,CAACO,SAAxB,EAAmC;EACxCC,cAAc,EAAE,UAAUC,WAAV,EAAuBC,UAAvB,EAAmCC,iBAAnC,EAAsDC,OAAtD,EAA+D;IAC7E,IAAIC,KAAK,GAAGF,iBAAiB,CAACG,UAAlB,EAAZ;IACA,KAAKR,MAAL,GAAcO,KAAd;IACA,KAAKT,WAAL,GAAmBM,UAAnB;IACA,KAAKL,kBAAL,GAA0BM,iBAA1B;IAEA,IAAII,SAAS,GAAG,mBAAmB,KAAKT,MAAxB,GAAiC,GAAjD;;IACA,IAAIG,WAAW,CAACO,gBAAhB,EAAkC;MAChC,IAAIC,aAAa,GAAGN,iBAAiB,CAACO,cAAtC;MACA,IAAIC,IAAI,GAAGF,aAAa,CAACG,aAAd,CAA4BL,SAA5B,CAAX;MACAhB,qBAAqB,CAACsB,YAAtB,CAAmC,IAAnC,EAAyCF,IAAzC;MACA,OAAOrB,WAAW,CAACqB,IAAD,CAAlB;IACD,CALD,MAKO;MACL,IAAIV,WAAW,CAACa,oBAAhB,EAAsC;QACpC;QACA;QACA;QACA,OAAO,EAAP;MACD;;MACD,OAAO,SAASP,SAAT,GAAqB,KAA5B;IACD;EACF,CAtBuC;EAuBxCQ,gBAAgB,EAAE,YAAY,CAAE,CAvBQ;EAwBxCC,WAAW,EAAE,YAAY;IACvB,OAAOzB,qBAAqB,CAAC0B,mBAAtB,CAA0C,IAA1C,CAAP;EACD,CA1BuC;EA2BxCC,gBAAgB,EAAE,YAAY;IAC5B3B,qBAAqB,CAAC4B,WAAtB,CAAkC,IAAlC;EACD;AA7BuC,CAAnC,CAAP;;AAgCAC,MAAM,CAACC,OAAP,GAAiB7B,sBAAjB"},"metadata":{},"sourceType":"script"}