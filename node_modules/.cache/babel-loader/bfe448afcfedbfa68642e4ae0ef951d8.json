{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(inst) {\n  return inst._wrapperState.valueTracker;\n}\n\nfunction attachTracker(inst, tracker) {\n  inst._wrapperState.valueTracker = tracker;\n}\n\nfunction detachTracker(inst) {\n  inst._wrapperState.valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value;\n\n  if (node) {\n    value = isCheckable(node) ? '' + node.checked : node.value;\n  }\n\n  return value;\n}\n\nvar inputValueTracking = {\n  // exposed for testing\n  _getTrackerFromNode: function (node) {\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));\n  },\n  track: function (inst) {\n    if (getTracker(inst)) {\n      return;\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var valueField = isCheckable(node) ? 'checked' : 'value';\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n    var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail\n    // and don't track value will cause over reporting of changes,\n    // but it's better then a hard failure\n    // (needed for certain tests that spyOn input values and Safari)\n\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;\n    }\n\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable,\n      configurable: true,\n      get: function () {\n        return descriptor.get.call(this);\n      },\n      set: function (value) {\n        currentValue = '' + value;\n        descriptor.set.call(this, value);\n      }\n    });\n    attachTracker(inst, {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = '' + value;\n      },\n      stopTracking: function () {\n        detachTracker(inst);\n        delete node[valueField];\n      }\n    });\n  },\n  updateValueIfChanged: function (inst) {\n    if (!inst) {\n      return false;\n    }\n\n    var tracker = getTracker(inst);\n\n    if (!tracker) {\n      inputValueTracking.track(inst);\n      return true;\n    }\n\n    var lastValue = tracker.getValue();\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));\n\n    if (nextValue !== lastValue) {\n      tracker.setValue(nextValue);\n      return true;\n    }\n\n    return false;\n  },\n  stopTracking: function (inst) {\n    var tracker = getTracker(inst);\n\n    if (tracker) {\n      tracker.stopTracking();\n    }\n  }\n};\nmodule.exports = inputValueTracking;","map":{"version":3,"names":["ReactDOMComponentTree","require","isCheckable","elem","type","nodeName","toLowerCase","getTracker","inst","_wrapperState","valueTracker","attachTracker","tracker","detachTracker","getValueFromNode","node","value","checked","inputValueTracking","_getTrackerFromNode","getInstanceFromNode","track","getNodeFromInstance","valueField","descriptor","Object","getOwnPropertyDescriptor","constructor","prototype","currentValue","hasOwnProperty","get","set","defineProperty","enumerable","configurable","call","getValue","setValue","stopTracking","updateValueIfChanged","lastValue","nextValue","module","exports"],"sources":["C:/Users/putha/node_modules/react-dom/lib/inputValueTracking.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(inst) {\n  return inst._wrapperState.valueTracker;\n}\n\nfunction attachTracker(inst, tracker) {\n  inst._wrapperState.valueTracker = tracker;\n}\n\nfunction detachTracker(inst) {\n  inst._wrapperState.valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value;\n  if (node) {\n    value = isCheckable(node) ? '' + node.checked : node.value;\n  }\n  return value;\n}\n\nvar inputValueTracking = {\n  // exposed for testing\n  _getTrackerFromNode: function (node) {\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));\n  },\n\n\n  track: function (inst) {\n    if (getTracker(inst)) {\n      return;\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var valueField = isCheckable(node) ? 'checked' : 'value';\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n    var currentValue = '' + node[valueField];\n\n    // if someone has already defined a value or Safari, then bail\n    // and don't track value will cause over reporting of changes,\n    // but it's better then a hard failure\n    // (needed for certain tests that spyOn input values and Safari)\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;\n    }\n\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable,\n      configurable: true,\n      get: function () {\n        return descriptor.get.call(this);\n      },\n      set: function (value) {\n        currentValue = '' + value;\n        descriptor.set.call(this, value);\n      }\n    });\n\n    attachTracker(inst, {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = '' + value;\n      },\n      stopTracking: function () {\n        detachTracker(inst);\n        delete node[valueField];\n      }\n    });\n  },\n\n  updateValueIfChanged: function (inst) {\n    if (!inst) {\n      return false;\n    }\n    var tracker = getTracker(inst);\n\n    if (!tracker) {\n      inputValueTracking.track(inst);\n      return true;\n    }\n\n    var lastValue = tracker.getValue();\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));\n\n    if (nextValue !== lastValue) {\n      tracker.setValue(nextValue);\n      return true;\n    }\n\n    return false;\n  },\n  stopTracking: function (inst) {\n    var tracker = getTracker(inst);\n    if (tracker) {\n      tracker.stopTracking();\n    }\n  }\n};\n\nmodule.exports = inputValueTracking;"],"mappings":"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"},"metadata":{},"sourceType":"script"}