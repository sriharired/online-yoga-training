{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n\n  var ref = element.ref;\n\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n  var prevRef = null;\n  var prevOwner = null;\n\n  if (prevElement !== null && typeof prevElement === 'object') {\n    prevRef = prevElement.ref;\n    prevOwner = prevElement._owner;\n  }\n\n  var nextRef = null;\n  var nextOwner = null;\n\n  if (nextElement !== null && typeof nextElement === 'object') {\n    nextRef = nextElement.ref;\n    nextOwner = nextElement._owner;\n  }\n\n  return prevRef !== nextRef || // If owner changes but we have an unchanged function ref, don't update refs\n  typeof nextRef === 'string' && nextOwner !== prevOwner;\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n\n  var ref = element.ref;\n\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;","map":{"version":3,"names":["ReactOwner","require","ReactRef","attachRef","ref","component","owner","getPublicInstance","addComponentAsRefTo","detachRef","removeComponentAsRefFrom","attachRefs","instance","element","_owner","shouldUpdateRefs","prevElement","nextElement","prevRef","prevOwner","nextRef","nextOwner","detachRefs","module","exports"],"sources":["C:/Users/putha/node_modules/react-dom/lib/ReactRef.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevRef = null;\n  var prevOwner = null;\n  if (prevElement !== null && typeof prevElement === 'object') {\n    prevRef = prevElement.ref;\n    prevOwner = prevElement._owner;\n  }\n\n  var nextRef = null;\n  var nextOwner = null;\n  if (nextElement !== null && typeof nextElement === 'object') {\n    nextRef = nextElement.ref;\n    nextOwner = nextElement._owner;\n  }\n\n  return prevRef !== nextRef ||\n  // If owner changes but we have an unchanged function ref, don't update refs\n  typeof nextRef === 'string' && nextOwner !== prevOwner;\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AAEA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,SAAxB,EAAmCC,KAAnC,EAA0C;EACxC,IAAI,OAAOF,GAAP,KAAe,UAAnB,EAA+B;IAC7BA,GAAG,CAACC,SAAS,CAACE,iBAAV,EAAD,CAAH;EACD,CAFD,MAEO;IACL;IACAP,UAAU,CAACQ,mBAAX,CAA+BH,SAA/B,EAA0CD,GAA1C,EAA+CE,KAA/C;EACD;AACF;;AAED,SAASG,SAAT,CAAmBL,GAAnB,EAAwBC,SAAxB,EAAmCC,KAAnC,EAA0C;EACxC,IAAI,OAAOF,GAAP,KAAe,UAAnB,EAA+B;IAC7BA,GAAG,CAAC,IAAD,CAAH;EACD,CAFD,MAEO;IACL;IACAJ,UAAU,CAACU,wBAAX,CAAoCL,SAApC,EAA+CD,GAA/C,EAAoDE,KAApD;EACD;AACF;;AAEDJ,QAAQ,CAACS,UAAT,GAAsB,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;EACjD,IAAIA,OAAO,KAAK,IAAZ,IAAoB,OAAOA,OAAP,KAAmB,QAA3C,EAAqD;IACnD;EACD;;EACD,IAAIT,GAAG,GAAGS,OAAO,CAACT,GAAlB;;EACA,IAAIA,GAAG,IAAI,IAAX,EAAiB;IACfD,SAAS,CAACC,GAAD,EAAMQ,QAAN,EAAgBC,OAAO,CAACC,MAAxB,CAAT;EACD;AACF,CARD;;AAUAZ,QAAQ,CAACa,gBAAT,GAA4B,UAAUC,WAAV,EAAuBC,WAAvB,EAAoC;EAC9D;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA,IAAIC,OAAO,GAAG,IAAd;EACA,IAAIC,SAAS,GAAG,IAAhB;;EACA,IAAIH,WAAW,KAAK,IAAhB,IAAwB,OAAOA,WAAP,KAAuB,QAAnD,EAA6D;IAC3DE,OAAO,GAAGF,WAAW,CAACZ,GAAtB;IACAe,SAAS,GAAGH,WAAW,CAACF,MAAxB;EACD;;EAED,IAAIM,OAAO,GAAG,IAAd;EACA,IAAIC,SAAS,GAAG,IAAhB;;EACA,IAAIJ,WAAW,KAAK,IAAhB,IAAwB,OAAOA,WAAP,KAAuB,QAAnD,EAA6D;IAC3DG,OAAO,GAAGH,WAAW,CAACb,GAAtB;IACAiB,SAAS,GAAGJ,WAAW,CAACH,MAAxB;EACD;;EAED,OAAOI,OAAO,KAAKE,OAAZ,IACP;EACA,OAAOA,OAAP,KAAmB,QAAnB,IAA+BC,SAAS,KAAKF,SAF7C;AAGD,CA9BD;;AAgCAjB,QAAQ,CAACoB,UAAT,GAAsB,UAAUV,QAAV,EAAoBC,OAApB,EAA6B;EACjD,IAAIA,OAAO,KAAK,IAAZ,IAAoB,OAAOA,OAAP,KAAmB,QAA3C,EAAqD;IACnD;EACD;;EACD,IAAIT,GAAG,GAAGS,OAAO,CAACT,GAAlB;;EACA,IAAIA,GAAG,IAAI,IAAX,EAAiB;IACfK,SAAS,CAACL,GAAD,EAAMQ,QAAN,EAAgBC,OAAO,CAACC,MAAxB,CAAT;EACD;AACF,CARD;;AAUAS,MAAM,CAACC,OAAP,GAAiBtB,QAAjB"},"metadata":{},"sourceType":"script"}