{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\n\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1',\n  113: 'F2',\n  114: 'F3',\n  115: 'F4',\n  116: 'F5',\n  117: 'F6',\n  118: 'F7',\n  119: 'F8',\n  120: 'F9',\n  121: 'F10',\n  122: 'F11',\n  123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\n\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  } // Browser does not implement `key`, polyfill as much of it as we can.\n\n\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n\n  return '';\n}\n\nmodule.exports = getEventKey;","map":{"version":3,"names":["getEventCharCode","require","normalizeKey","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","translateToKey","getEventKey","nativeEvent","key","type","charCode","String","fromCharCode","keyCode","module","exports"],"sources":["C:/Users/putha/node_modules/react-dom/lib/getEventKey.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1',\n  113: 'F2',\n  114: 'F3',\n  115: 'F4',\n  116: 'F5',\n  117: 'F6',\n  118: 'F7',\n  119: 'F8',\n  120: 'F9',\n  121: 'F10',\n  122: 'F11',\n  123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;AAEA;AACA;AACA;AACA;;;AACA,IAAIC,YAAY,GAAG;EACjBC,GAAG,EAAE,QADY;EAEjBC,QAAQ,EAAE,GAFO;EAGjBC,IAAI,EAAE,WAHW;EAIjBC,EAAE,EAAE,SAJa;EAKjBC,KAAK,EAAE,YALU;EAMjBC,IAAI,EAAE,WANW;EAOjBC,GAAG,EAAE,QAPY;EAQjBC,GAAG,EAAE,IARY;EASjBC,IAAI,EAAE,aATW;EAUjBC,IAAI,EAAE,aAVW;EAWjBC,MAAM,EAAE,YAXS;EAYjBC,eAAe,EAAE;AAZA,CAAnB;AAeA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG;EACnB,GAAG,WADgB;EAEnB,GAAG,KAFgB;EAGnB,IAAI,OAHe;EAInB,IAAI,OAJe;EAKnB,IAAI,OALe;EAMnB,IAAI,SANe;EAOnB,IAAI,KAPe;EAQnB,IAAI,OARe;EASnB,IAAI,UATe;EAUnB,IAAI,QAVe;EAWnB,IAAI,GAXe;EAYnB,IAAI,QAZe;EAanB,IAAI,UAbe;EAcnB,IAAI,KAde;EAenB,IAAI,MAfe;EAgBnB,IAAI,WAhBe;EAiBnB,IAAI,SAjBe;EAkBnB,IAAI,YAlBe;EAmBnB,IAAI,WAnBe;EAoBnB,IAAI,QApBe;EAqBnB,IAAI,QArBe;EAsBnB,KAAK,IAtBc;EAuBnB,KAAK,IAvBc;EAwBnB,KAAK,IAxBc;EAyBnB,KAAK,IAzBc;EA0BnB,KAAK,IA1Bc;EA2BnB,KAAK,IA3Bc;EA4BnB,KAAK,IA5Bc;EA6BnB,KAAK,IA7Bc;EA8BnB,KAAK,IA9Bc;EA+BnB,KAAK,KA/Bc;EAgCnB,KAAK,KAhCc;EAiCnB,KAAK,KAjCc;EAkCnB,KAAK,SAlCc;EAmCnB,KAAK,YAnCc;EAoCnB,KAAK;AApCc,CAArB;AAuCA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,WAArB,EAAkC;EAChC,IAAIA,WAAW,CAACC,GAAhB,EAAqB;IACnB;IACA;IAEA;IACA;IACA,IAAIA,GAAG,GAAGhB,YAAY,CAACe,WAAW,CAACC,GAAb,CAAZ,IAAiCD,WAAW,CAACC,GAAvD;;IACA,IAAIA,GAAG,KAAK,cAAZ,EAA4B;MAC1B,OAAOA,GAAP;IACD;EACF,CAX+B,CAahC;;;EACA,IAAID,WAAW,CAACE,IAAZ,KAAqB,UAAzB,EAAqC;IACnC,IAAIC,QAAQ,GAAGpB,gBAAgB,CAACiB,WAAD,CAA/B,CADmC,CAGnC;IACA;;IACA,OAAOG,QAAQ,KAAK,EAAb,GAAkB,OAAlB,GAA4BC,MAAM,CAACC,YAAP,CAAoBF,QAApB,CAAnC;EACD;;EACD,IAAIH,WAAW,CAACE,IAAZ,KAAqB,SAArB,IAAkCF,WAAW,CAACE,IAAZ,KAAqB,OAA3D,EAAoE;IAClE;IACA;IACA,OAAOJ,cAAc,CAACE,WAAW,CAACM,OAAb,CAAd,IAAuC,cAA9C;EACD;;EACD,OAAO,EAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBT,WAAjB"},"metadata":{},"sourceType":"script"}