{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactUpdates = require('./ReactUpdates');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueLink = false;\nvar didWarnValDefaultVal = false;\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\n\nvar ReactDOMTextarea = {\n  getHostProps: function (inst, props) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0; // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent\n    // to only set the value if/when the value differs from the node value (which would\n    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.\n    // The value can be a boolean or object so that's why it's forced to be a string.\n\n    var hostProps = _assign({}, props, {\n      value: undefined,\n      defaultValue: undefined,\n      children: '' + inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return hostProps;\n  },\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n        didWarnValDefaultVal = true;\n      }\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    var initialValue = value; // Only bother fetching default value if we're going to use it\n\n    if (value == null) {\n      var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.\n\n      var children = props.children;\n\n      if (children != null) {\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;\n        }\n\n        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;\n\n        if (Array.isArray(children)) {\n          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;\n          children = children[0];\n        }\n\n        defaultValue = '' + children;\n      }\n\n      if (defaultValue == null) {\n        defaultValue = '';\n      }\n\n      initialValue = defaultValue;\n    }\n\n    inst._wrapperState = {\n      initialValue: '' + initialValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      var newValue = '' + value; // To avoid side effects (such as losing text selection), only set value if changed\n\n      if (newValue !== node.value) {\n        node.value = newValue;\n      }\n\n      if (props.defaultValue == null) {\n        node.defaultValue = newValue;\n      }\n    }\n\n    if (props.defaultValue != null) {\n      node.defaultValue = props.defaultValue;\n    }\n  },\n  postMountWrapper: function (inst) {\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var textContent = node.textContent; // Only set node.value if textContent is equal to the expected\n    // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n    // will populate textContent as well.\n    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n\n    if (textContent === inst._wrapperState.initialValue) {\n      node.value = textContent;\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;","map":{"version":3,"names":["_prodInvariant","require","_assign","LinkedValueUtils","ReactDOMComponentTree","ReactUpdates","invariant","warning","didWarnValueLink","didWarnValDefaultVal","forceUpdateIfMounted","_rootNodeID","ReactDOMTextarea","updateWrapper","getHostProps","inst","props","dangerouslySetInnerHTML","process","env","NODE_ENV","hostProps","value","undefined","defaultValue","children","_wrapperState","initialValue","onChange","mountWrapper","checkPropTypes","_currentElement","_owner","valueLink","getValue","Array","isArray","length","listeners","_handleChange","bind","node","getNodeFromInstance","newValue","postMountWrapper","textContent","event","returnValue","executeOnChange","asap","module","exports"],"sources":["C:/Users/putha/node_modules/react-dom/lib/ReactDOMTextarea.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueLink = false;\nvar didWarnValDefaultVal = false;\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getHostProps: function (inst, props) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent\n    // to only set the value if/when the value differs from the node value (which would\n    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.\n    // The value can be a boolean or object so that's why it's forced to be a string.\n    var hostProps = _assign({}, props, {\n      value: undefined,\n      defaultValue: undefined,\n      children: '' + inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return hostProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n        didWarnValDefaultVal = true;\n      }\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    var initialValue = value;\n\n    // Only bother fetching default value if we're going to use it\n    if (value == null) {\n      var defaultValue = props.defaultValue;\n      // TODO (yungsters): Remove support for children content in <textarea>.\n      var children = props.children;\n      if (children != null) {\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;\n        }\n        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;\n        if (Array.isArray(children)) {\n          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;\n          children = children[0];\n        }\n\n        defaultValue = '' + children;\n      }\n      if (defaultValue == null) {\n        defaultValue = '';\n      }\n      initialValue = defaultValue;\n    }\n\n    inst._wrapperState = {\n      initialValue: '' + initialValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      var newValue = '' + value;\n\n      // To avoid side effects (such as losing text selection), only set value if changed\n      if (newValue !== node.value) {\n        node.value = newValue;\n      }\n      if (props.defaultValue == null) {\n        node.defaultValue = newValue;\n      }\n    }\n    if (props.defaultValue != null) {\n      node.defaultValue = props.defaultValue;\n    }\n  },\n\n  postMountWrapper: function (inst) {\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var textContent = node.textContent;\n\n    // Only set node.value if textContent is equal to the expected\n    // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n    // will populate textContent as well.\n    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n    if (textContent === inst._wrapperState.initialValue) {\n      node.value = textContent;\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;"],"mappings":"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"},"metadata":{},"sourceType":"script"}